service: customers

frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-s3-local

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  s3:
    stages:
      - dev
    host: localhost

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1
  apiGateway:
    shouldStartNameWithService: true
  environment:
    CUSTOMERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    CUSTOMERS_IMAGES_BUCKET: theam-recruiting-${self:service}-images-${opt:stage, self:provider.stage}
    DEFAULT_IMAGE_PATH: dummy_image.png
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:updateItem
        - s3:putObject
        - s3:putObjectAcl
        - s3:listBucket
        - s3:getObject
      Resource: "*"

functions:
  getAllCustomers:
    handler: src/handlers/handler.getAllCustomers
    description: Get All Customers from DB
    events:
      - http:
          path: customers
          method: get
          cors: true
  getCustomer:
    handler: src/handlers/handler.getCustomer
    description: Get customer from DB by it's id
    events:
      - http:
          path: customers/{id}
          method: get
          cors: true
  createCustomer:
      handler: src/handlers/handler.createCustomer
      description: Create customer
      events:
        - http:
            path: customers
            method: post
            cors: true
  deleteCustomer:
    handler: src/handlers/handler.deleteCustomer
    description: Delete a customer given it's id
    events:
      - http:
          path: customers/{id}
          method: delete
          cors: true
  updateCustomer:
    handler: src/handlers/handler.updateCustomer
    description: Update a customer
    events:
      - http:
          path: customers/{id}
          method: put
          cors: true
  getUploadURL:
    handler: src/handlers/handler.getUploadURL
    description: Get a presigned url to upload file to S3
    events:
      - http:
          path: images/upload/{id}
          method: get
          cors: true
  customerImageUploadedToS3:
    handler: src/handlers/handler.uploadedCustomerImageToS3
    description: assign the uploaded customer photo to it
    events:
      - s3:
          bucket: theam-recruiting-${self:service}-images-${opt:stage, self:provider.stage}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .jpg
          existing: true

resources:
  Resources:
    CustomersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.CUSTOMERS_TABLE}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CustomersImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: theam-recruiting-${self:service}-images-${opt:stage, self:provider.stage}